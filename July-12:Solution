
1900. The Earliest and Latest Rounds Where Players Compete
Solution: 


from functools import cache
from typing import List

class Solution:
    def earliestAndLatest(self, n: int, firstPlayer: int, secondPlayer: int) -> List[int]:
        min_round, max_round = float('inf'), float('-inf')
        all_players = ''.join(chr(i + 65) for i in range(1, n + 1))
        playerA = chr(firstPlayer + 65)
        playerB = chr(secondPlayer + 65)

        @cache
        def dfs(current_round: str, round_number: int, winners: str):
            nonlocal min_round, max_round

            if len(current_round) == 0:
                dfs(''.join(sorted(winners)), round_number + 1, '')
                return

            if len(current_round) == 1:
                winners += current_round[0]
                dfs(''.join(sorted(winners)), round_number + 1, '')
                return

            if current_round[0] == playerA and current_round[-1] == playerB:
                min_round = min(min_round, round_number)
                max_round = max(max_round, round_number)
                return

            elif current_round[0] == playerA or current_round[0] == playerB:
                winners += current_round[0]
                dfs(current_round[1:-1], round_number, winners)

            elif current_round[-1] == playerA or current_round[-1] == playerB:
                winners += current_round[-1]
                dfs(current_round[1:-1], round_number, winners)

            else:
                left, right = current_round[0], current_round[-1]
                dfs(current_round[1:-1], round_number, winners + left)
                dfs(current_round[1:-1], round_number, winners + right)

        dfs(all_players, 1, '')
        return [min_round, max_round]
